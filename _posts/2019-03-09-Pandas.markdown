---
layout: post
title: Pandas
date: 2019-03-09
Tags: Pandas
---
# Pandas

Pandas is one of the most popular software (Python) library that can be used by the Data Analyst and Data Scientist for data manipulation and data analysis. Pandas can be used for the management of two-dimensional data tables. Pandas can be said to be the SQL of python though pandas have additional features as well. In this blog, I will show the most commonly used features of Pandas by a data analyst and data scientist.
    
The blog is done in Jupyter notebook. Installing python 3 and Jupyter notebook is not part of this blog. So, we can assume that these are already installed and we are ready to go.


### Import Pandas

Importing Pandas is one of the first step whenever we work in pandas. When we write 'import pandas as pd', it means that Jupyter notebook understands that when you write pd, it is referring to Pandas library.


```python
import pandas as pd
```

### Read from the file

Any type of file compatible to work in Pandas like csv, excel etc can be read in Pandas.


```python
df = pd.read_csv("Customers.csv")
```

### Get top 3 rows

head(n) gives the first n number of rows where n = 3 above


```python
df.head(3)
```



<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe" style="font-size:    10px;">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>Customer ID</th>
      <th>Name</th>
      <th>Surname</th>
      <th>Gender</th>
      <th>Age</th>
      <th>Region</th>
      <th>Job Classification</th>
      <th>Date Joined</th>
      <th>Balance</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>100000001</td>
      <td>Simon</td>
      <td>Walsh</td>
      <td>Male</td>
      <td>21</td>
      <td>England</td>
      <td>White Collar</td>
      <td>05.Jan.15</td>
      <td>113810.15</td>
    </tr>
    <tr>
      <th>1</th>
      <td>400000002</td>
      <td>Jasmine</td>
      <td>Miller</td>
      <td>Female</td>
      <td>34</td>
      <td>Northern Ireland</td>
      <td>Blue Collar</td>
      <td>06.Jan.15</td>
      <td>36919.73</td>
    </tr>
    <tr>
      <th>2</th>
      <td>100000003</td>
      <td>Liam</td>
      <td>Brown</td>
      <td>Male</td>
      <td>46</td>
      <td>England</td>
      <td>White Collar</td>
      <td>07.Jan.15</td>
      <td>101536.83</td>
    </tr>
  </tbody>
</table>
</div>



### Get bottom 2 rows

tail(n) gives the last n number of rows where n = 3 above


```python
df.tail(3)
```




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe" style="font-size:    10px;">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>Customer ID</th>
      <th>Name</th>
      <th>Surname</th>
      <th>Gender</th>
      <th>Age</th>
      <th>Region</th>
      <th>Job Classification</th>
      <th>Date Joined</th>
      <th>Balance</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>4011</th>
      <td>200004012</td>
      <td>Hannah</td>
      <td>Springer</td>
      <td>Female</td>
      <td>50</td>
      <td>Scotland</td>
      <td>Other</td>
      <td>30.Dec.15</td>
      <td>59477.82</td>
    </tr>
    <tr>
      <th>4012</th>
      <td>200004013</td>
      <td>Christian</td>
      <td>Reid</td>
      <td>Male</td>
      <td>51</td>
      <td>Scotland</td>
      <td>Blue Collar</td>
      <td>30.Dec.15</td>
      <td>239.45</td>
    </tr>
    <tr>
      <th>4013</th>
      <td>300004014</td>
      <td>Stephen</td>
      <td>May</td>
      <td>Male</td>
      <td>33</td>
      <td>Wales</td>
      <td>Blue Collar</td>
      <td>30.Dec.15</td>
      <td>30293.19</td>
    </tr>
  </tbody>
</table>
</div>



### Summary of the data

describe() gives total number of count, mean, standard deviation, minimum, maximum, 25%, 50% and 75% of value


```python
df.describe()
```




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;" style="font-size:    10px;">
      <th></th>
      <th>Customer ID</th>
      <th>Age</th>
      <th>Balance</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>count</th>
      <td>4.014000e+03</td>
      <td>4014.000000</td>
      <td>4014.000000</td>
    </tr>
    <tr>
      <th>mean</th>
      <td>1.696831e+08</td>
      <td>38.611111</td>
      <td>39766.448274</td>
    </tr>
    <tr>
      <th>std</th>
      <td>8.865374e+07</td>
      <td>9.819121</td>
      <td>29859.489192</td>
    </tr>
    <tr>
      <th>min</th>
      <td>1.000000e+08</td>
      <td>15.000000</td>
      <td>11.520000</td>
    </tr>
    <tr>
      <th>25%</th>
      <td>1.000020e+08</td>
      <td>31.000000</td>
      <td>16115.367500</td>
    </tr>
    <tr>
      <th>50%</th>
      <td>1.000038e+08</td>
      <td>37.000000</td>
      <td>33567.330000</td>
    </tr>
    <tr>
      <th>75%</th>
      <td>2.000031e+08</td>
      <td>45.000000</td>
      <td>57533.930000</td>
    </tr>
    <tr>
      <th>max</th>
      <td>4.000038e+08</td>
      <td>64.000000</td>
      <td>183467.700000</td>
    </tr>
  </tbody>
</table>
</div>



### Name of the Columns


```python
df.columns
```




    Index(['Customer ID', 'Name', 'Surname', 'Gender', 'Age', 'Region',
           'Job Classification', 'Date Joined', 'Balance'],
          dtype='object')



### Creating new dataframe which has the subset of the columns

New data frame includes only three columns 'Customer ID', 'Name', 'Gender' from the old dataframe.


```python
new_df = df[['Customer ID','Name', 'Gender']]
print(type(df)) # original dataframe
print(type(new_df)) # newly created dataframe
new_df.head()
```

    <class 'pandas.core.frame.DataFrame'>
    <class 'pandas.core.frame.DataFrame'>
    




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe" style="font-size:    15px;">
  <thead>
    <tr style="text-align: middle;">
      <th></th>
      <th>Customer ID</th>
      <th>Name</th>
      <th>Gender</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>100000001</td>
      <td>Simon</td>
      <td>Male</td>
    </tr>
    <tr>
      <th>1</th>
      <td>400000002</td>
      <td>Jasmine</td>
      <td>Female</td>
    </tr>
    <tr>
      <th>2</th>
      <td>100000003</td>
      <td>Liam</td>
      <td>Male</td>
    </tr>
    <tr>
      <th>3</th>
      <td>300000004</td>
      <td>Trevor</td>
      <td>Male</td>
    </tr>
    <tr>
      <th>4</th>
      <td>100000005</td>
      <td>Deirdre</td>
      <td>Female</td>
    </tr>
  </tbody>
</table>
</div>



### Filter the rows based on the condition

It checks the condition ands gives values if true.


```python
df1 = df[df['Balance'] >150000]
df1
```




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe" style="font-size:    10px;">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>Customer ID</th>
      <th>Name</th>
      <th>Surname</th>
      <th>Gender</th>
      <th>Age</th>
      <th>Region</th>
      <th>Job Classification</th>
      <th>Date Joined</th>
      <th>Balance</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>1306</th>
      <td>100001307</td>
      <td>Dorothy</td>
      <td>Jackson</td>
      <td>Female</td>
      <td>31</td>
      <td>England</td>
      <td>White Collar</td>
      <td>22.Jul.15</td>
      <td>183467.70</td>
    </tr>
    <tr>
      <th>2009</th>
      <td>200002010</td>
      <td>Connor</td>
      <td>North</td>
      <td>Male</td>
      <td>50</td>
      <td>Scotland</td>
      <td>Other</td>
      <td>11.Sep.15</td>
      <td>172085.48</td>
    </tr>
    <tr>
      <th>3449</th>
      <td>100003450</td>
      <td>Carl</td>
      <td>Fraser</td>
      <td>Male</td>
      <td>35</td>
      <td>England</td>
      <td>White Collar</td>
      <td>30.Nov.15</td>
      <td>181680.99</td>
    </tr>
    <tr>
      <th>3831</th>
      <td>100003832</td>
      <td>Sebastian</td>
      <td>Arnold</td>
      <td>Male</td>
      <td>44</td>
      <td>England</td>
      <td>Blue Collar</td>
      <td>20.Dec.15</td>
      <td>161517.82</td>
    </tr>
  </tbody>
</table>
</div>



### Merge in Pandas

Merge two dataframes


```python
df1= pd.DataFrame({ "Employee_id":[100,120,130],"Salary":[2000,5000,5000],"Year_entered":[2001, 2002,2003]})
df2=pd.DataFrame({ "Employee_id":[130,140,150],"Salary":[5000,8000,6000],"Year_entered":[2003, 2005,2007]})
merged= pd.merge(df1,df2)

display(df1)
display(df2)
display(merged)
```


<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe" style="font-size: 13px;">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>Employee_id</th>
      <th>Salary</th>
      <th>Year_entered</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>100</td>
      <td>2000</td>
      <td>2001</td>
    </tr>
    <tr>
      <th>1</th>
      <td>120</td>
      <td>5000</td>
      <td>2002</td>
    </tr>
    <tr>
      <th>2</th>
      <td>130</td>
      <td>5000</td>
      <td>2003</td>
    </tr>
  </tbody>
</table>
</div>



<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe" style="font-size:    13px;">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>Employee_id</th>
      <th>Salary</th>
      <th>Year_entered</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>130</td>
      <td>5000</td>
      <td>2003</td>
    </tr>
    <tr>
      <th>1</th>
      <td>140</td>
      <td>8000</td>
      <td>2005</td>
    </tr>
    <tr>
      <th>2</th>
      <td>150</td>
      <td>6000</td>
      <td>2007</td>
    </tr>
  </tbody>
</table>
</div>



<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe" style="font-size:    13px;">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>Employee_id</th>
      <th>Salary</th>
      <th>Year_entered</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>130</td>
      <td>5000</td>
      <td>2003</td>
    </tr>
  </tbody>
</table>
</div>


Merge two dataframes along the 'Employee_id' value


```python
merged= pd.merge(df1,df2,left_on = 'Employee_id', right_on = 'Employee_id')
display(merged)

```


<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe" style="font-size:    13px;">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>Employee_id</th>
      <th>Salary_x</th>
      <th>Year_entered_x</th>
      <th>Salary_y</th>
      <th>Year_entered_y</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>130</td>
      <td>5000</td>
      <td>2003</td>
      <td>5000</td>
      <td>2003</td>
    </tr>
  </tbody>
</table>
</div>


Merge two dataframes along the 'Employee_id' value


```python
merged= pd.merge(df1,df2,on = 'Employee_id')
display(merged)
```


<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe" style="font-size:    13px;">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>Employee_id</th>
      <th>Salary_x</th>
      <th>Year_entered_x</th>
      <th>Salary_y</th>
      <th>Year_entered_y</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>130</td>
      <td>5000</td>
      <td>2003</td>
      <td>5000</td>
      <td>2003</td>
    </tr>
  </tbody>
</table>
</div>


Merge two dataframes along the 'Employee_id' value using left join


```python
merged= pd.merge(df1,df2, on = 'Employee_id', how = 'left')
display(merged)
```


<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe" style="font-size:    13px;">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>Employee_id</th>
      <th>Salary_x</th>
      <th>Year_entered_x</th>
      <th>Salary_y</th>
      <th>Year_entered_y</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>100</td>
      <td>2000</td>
      <td>2001</td>
      <td>NaN</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>1</th>
      <td>120</td>
      <td>5000</td>
      <td>2002</td>
      <td>NaN</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>2</th>
      <td>130</td>
      <td>5000</td>
      <td>2003</td>
      <td>5000.0</td>
      <td>2003.0</td>
    </tr>
  </tbody>
</table>
</div>


Merge two dataframes along the 'Employee_id' value using right join


```python
merged= pd.merge(df1,df2,on = 'Employee_id', how = 'right')
display(merged)
```


<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe" style="font-size:    13px;">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>Employee_id</th>
      <th>Salary_x</th>
      <th>Year_entered_x</th>
      <th>Salary_y</th>
      <th>Year_entered_y</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>130</td>
      <td>5000.0</td>
      <td>2003.0</td>
      <td>5000</td>
      <td>2003</td>
    </tr>
    <tr>
      <th>1</th>
      <td>140</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>8000</td>
      <td>2005</td>
    </tr>
    <tr>
      <th>2</th>
      <td>150</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>6000</td>
      <td>2007</td>
    </tr>
  </tbody>
</table>
</div>


Merge two dataframes along the 'Employee_id' value using outer join


```python
merged= pd.merge(df1,df2,on = 'Employee_id', how = 'outer')
display(merged)
```


<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe" style="font-size:    13px;">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>Employee_id</th>
      <th>Salary_x</th>
      <th>Year_entered_x</th>
      <th>Salary_y</th>
      <th>Year_entered_y</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>100</td>
      <td>2000.0</td>
      <td>2001.0</td>
      <td>NaN</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>1</th>
      <td>120</td>
      <td>5000.0</td>
      <td>2002.0</td>
      <td>NaN</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>2</th>
      <td>130</td>
      <td>5000.0</td>
      <td>2003.0</td>
      <td>5000.0</td>
      <td>2003.0</td>
    </tr>
    <tr>
      <th>3</th>
      <td>140</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>8000.0</td>
      <td>2005.0</td>
    </tr>
    <tr>
      <th>4</th>
      <td>150</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>6000.0</td>
      <td>2007.0</td>
    </tr>
  </tbody>
</table>
</div>


### Concatination

Join the two dataframes along rows


```python
concat= pd.concat([df1,df2])
display(concat)
```


<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe" style="font-size:    13px;">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>Employee_id</th>
      <th>Salary</th>
      <th>Year_entered</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>100</td>
      <td>2000</td>
      <td>2001</td>
    </tr>
    <tr>
      <th>1</th>
      <td>120</td>
      <td>5000</td>
      <td>2002</td>
    </tr>
    <tr>
      <th>2</th>
      <td>130</td>
      <td>5000</td>
      <td>2003</td>
    </tr>
    <tr>
      <th>0</th>
      <td>130</td>
      <td>5000</td>
      <td>2003</td>
    </tr>
    <tr>
      <th>1</th>
      <td>140</td>
      <td>8000</td>
      <td>2005</td>
    </tr>
    <tr>
      <th>2</th>
      <td>150</td>
      <td>6000</td>
      <td>2007</td>
    </tr>
  </tbody>
</table>
</div>


### Sort by the column

Sort the df by 'Year_entered' (ascending order). 


```python
df1.sort_values(by='Year_entered')
```




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe" style="font-size:    13px;">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>Employee_id</th>
      <th>Salary</th>
      <th>Year_entered</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>100</td>
      <td>2000</td>
      <td>2001</td>
    </tr>
    <tr>
      <th>1</th>
      <td>120</td>
      <td>5000</td>
      <td>2002</td>
    </tr>
    <tr>
      <th>2</th>
      <td>130</td>
      <td>5000</td>
      <td>2003</td>
    </tr>
  </tbody>
</table>
</div>



## Aggregation in Pandas

Some of the aggregation function includes number of rows, minimum, maximum value, mean, median, mode of the particular columns

### Count()


```python
df1.count()
```




    Employee_id     3
    Salary          3
    Year_entered    3
    dtype: int64




```python
df1[['Salary']].count()
```




    Salary    3
    dtype: int64



### min() and max()


```python
df1[['Salary']].min()
```




    Salary    2000
    dtype: int64




```python
df1[['Salary']].max()
```




    Salary    5000
    dtype: int64



### mean(), median() and mode()


```python
df1[['Salary']].mean()
```




    Salary    4000.0
    dtype: float64




```python
df1[['Salary']].median()
```




    Salary    5000.0
    dtype: float64




```python
df1[['Salary']].mode()
```




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe" style="font-size:    13px;">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>Salary</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>5000</td>
    </tr>
  </tbody>
</table>
</div>



## Grouping in Pandas

Group the dataframe by 'Year_entered'


```python
df1.groupby('Year_entered')
```




    <pandas.core.groupby.groupby.DataFrameGroupBy object at 0x000001F0C729A2E8>



Counts the 'Employee_id' and 'Salary' by grouping the dataframe based on 'Year_entered'


```python
df1.groupby('Year_entered').count()
```




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe" style="font-size:    13px;">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>Employee_id</th>
      <th>Salary</th>
    </tr>
    <tr>
      <th>Year_entered</th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>2001</th>
      <td>1</td>
      <td>1</td>
    </tr>
    <tr>
      <th>2002</th>
      <td>1</td>
      <td>1</td>
    </tr>
    <tr>
      <th>2003</th>
      <td>1</td>
      <td>1</td>
    </tr>
  </tbody>
</table>
</div>



Provides mean of the 'Salary' of each group  by grouping the dataframe based on 'Year_entered'


```python
df1.groupby('Year_entered').mean()[['Salary']]
```




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe" style="font-size:    13px;">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>Salary</th>
    </tr>
    <tr>
      <th>Year_entered</th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>2001</th>
      <td>2000</td>
    </tr>
    <tr>
      <th>2002</th>
      <td>5000</td>
    </tr>
    <tr>
      <th>2003</th>
      <td>5000</td>
    </tr>
  </tbody>
</table>
</div>


