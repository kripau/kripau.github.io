---
layout: post
title: Pandas
date: 2019-02-02
Tags: Linux
---
# Pandas

Pandas is one of the most popular software (Python) library that can be used by the Data Analyst and Data Scientist for data manipulation and data analysis. Pandas can be used for the management of two-dimensional data tables. Pan can be said to be the SQL of python though pandas have additional features as well. In this blog, I will show the most commonly used features of  Pandas by a data analyst and data scientist.
    
The blog is done in Jupyter Notebook. Installing python 3 and Jupyter notebook is not part of this blog. So, we can assume that these are already installed and we are ready to go.


### Import pandas


```python
import pandas as pd
```

Importing pandas is one of the first step whenever we work in pandas. When we write import pandas as pd, it means that jupyter notebook understand when you write pd, it is referring to pandas library.

### Read from the fileÂ¶


```python
df = pd.read_csv("Customers.csv")
```

  Any type of file compatible to work in pandas like csv, excel etc can be read in pandas.

### Get top 2 rows


```python
df.head(3)
```




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
      
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe" style="font-size:	10px;">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>Customer ID</th>
      <th>Name</th>
      <th>Surname</th>
      <th>Gender</th>
      <th>Age</th>
      <th>Region</th>
      <th>Job Classification</th>
      <th>Date Joined</th>
      <th>Balance</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>100000001</td>
      <td>Simon</td>
      <td>Walsh</td>
      <td>Male</td>
      <td>21</td>
      <td>England</td>
      <td>White Collar</td>
      <td>05.Jan.15</td>
      <td>113810.15</td>
    </tr>
    <tr>
      <th>1</th>
      <td>400000002</td>
      <td>Jasmine</td>
      <td>Miller</td>
      <td>Female</td>
      <td>34</td>
      <td>Northern Ireland</td>
      <td>Blue Collar</td>
      <td>06.Jan.15</td>
      <td>36919.73</td>
    </tr>
    <tr>
      <th>2</th>
      <td>100000003</td>
      <td>Liam</td>
      <td>Brown</td>
      <td>Male</td>
      <td>46</td>
      <td>England</td>
      <td>White Collar</td>
      <td>07.Jan.15</td>
      <td>101536.83</td>
    </tr>
  </tbody>
</table>
</div>



     head() gives the first n number of rows where n=3 above

### Get bottom 2 rows


```python
df.tail(3)
```




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe" style="font-size:	10px;">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>Customer ID</th>
      <th>Name</th>
      <th>Surname</th>
      <th>Gender</th>
      <th>Age</th>
      <th>Region</th>
      <th>Job Classification</th>
      <th>Date Joined</th>
      <th>Balance</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>4011</th>
      <td>200004012</td>
      <td>Hannah</td>
      <td>Springer</td>
      <td>Female</td>
      <td>50</td>
      <td>Scotland</td>
      <td>Other</td>
      <td>30.Dec.15</td>
      <td>59477.82</td>
    </tr>
    <tr>
      <th>4012</th>
      <td>200004013</td>
      <td>Christian</td>
      <td>Reid</td>
      <td>Male</td>
      <td>51</td>
      <td>Scotland</td>
      <td>Blue Collar</td>
      <td>30.Dec.15</td>
      <td>239.45</td>
    </tr>
    <tr>
      <th>4013</th>
      <td>300004014</td>
      <td>Stephen</td>
      <td>May</td>
      <td>Male</td>
      <td>33</td>
      <td>Wales</td>
      <td>Blue Collar</td>
      <td>30.Dec.15</td>
      <td>30293.19</td>
    </tr>
  </tbody>
</table>
</div>



    tail() gives the last n number of rows where n=3 above

### Summary of the data


```python
df.describe()
```




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>Customer ID</th>
      <th>Age</th>
      <th>Balance</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>count</th>
      <td>4.014000e+03</td>
      <td>4014.000000</td>
      <td>4014.000000</td>
    </tr>
    <tr>
      <th>mean</th>
      <td>1.696831e+08</td>
      <td>38.611111</td>
      <td>39766.448274</td>
    </tr>
    <tr>
      <th>std</th>
      <td>8.865374e+07</td>
      <td>9.819121</td>
      <td>29859.489192</td>
    </tr>
    <tr>
      <th>min</th>
      <td>1.000000e+08</td>
      <td>15.000000</td>
      <td>11.520000</td>
    </tr>
    <tr>
      <th>25%</th>
      <td>1.000020e+08</td>
      <td>31.000000</td>
      <td>16115.367500</td>
    </tr>
    <tr>
      <th>50%</th>
      <td>1.000038e+08</td>
      <td>37.000000</td>
      <td>33567.330000</td>
    </tr>
    <tr>
      <th>75%</th>
      <td>2.000031e+08</td>
      <td>45.000000</td>
      <td>57533.930000</td>
    </tr>
    <tr>
      <th>max</th>
      <td>4.000038e+08</td>
      <td>64.000000</td>
      <td>183467.700000</td>
    </tr>
  </tbody>
</table>
</div>



describe() gives total number of count, mean, standard deviation, minimum, maximum, 25%, 50% and 75% of value

### Name of the Columns


```python
df.columns
```




    Index(['Customer ID', 'Name', 'Surname', 'Gender', 'Age', 'Region',
           'Job Classification', 'Date Joined', 'Balance'],
          dtype='object')



### Creating new dataframe which has the subset of the columns


```python
new_df = df[['Customer ID','Name', 'Gender']]
print(type(df)) # original dataframe
print(type(new_df)) # newly created dataframe
new_df.head()
```

    <class 'pandas.core.frame.DataFrame'>
    <class 'pandas.core.frame.DataFrame'>
    




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>Customer ID</th>
      <th>Name</th>
      <th>Gender</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>100000001</td>
      <td>Simon</td>
      <td>Male</td>
    </tr>
    <tr>
      <th>1</th>
      <td>400000002</td>
      <td>Jasmine</td>
      <td>Female</td>
    </tr>
    <tr>
      <th>2</th>
      <td>100000003</td>
      <td>Liam</td>
      <td>Male</td>
    </tr>
    <tr>
      <th>3</th>
      <td>300000004</td>
      <td>Trevor</td>
      <td>Male</td>
    </tr>
    <tr>
      <th>4</th>
      <td>100000005</td>
      <td>Deirdre</td>
      <td>Female</td>
    </tr>
  </tbody>
</table>
</div>



    New data frame includes only three columns 'Customer ID', 'Name', 'Gender' from the old dataframe.

### Filter the rows based on the condition


```python
df1 = df[df['Balance'] >150000]
df1
```




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>Customer ID</th>
      <th>Name</th>
      <th>Surname</th>
      <th>Gender</th>
      <th>Age</th>
      <th>Region</th>
      <th>Job Classification</th>
      <th>Date Joined</th>
      <th>Balance</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>1306</th>
      <td>100001307</td>
      <td>Dorothy</td>
      <td>Jackson</td>
      <td>Female</td>
      <td>31</td>
      <td>England</td>
      <td>White Collar</td>
      <td>22.Jul.15</td>
      <td>183467.70</td>
    </tr>
    <tr>
      <th>2009</th>
      <td>200002010</td>
      <td>Connor</td>
      <td>North</td>
      <td>Male</td>
      <td>50</td>
      <td>Scotland</td>
      <td>Other</td>
      <td>11.Sep.15</td>
      <td>172085.48</td>
    </tr>
    <tr>
      <th>3449</th>
      <td>100003450</td>
      <td>Carl</td>
      <td>Fraser</td>
      <td>Male</td>
      <td>35</td>
      <td>England</td>
      <td>White Collar</td>
      <td>30.Nov.15</td>
      <td>181680.99</td>
    </tr>
    <tr>
      <th>3831</th>
      <td>100003832</td>
      <td>Sebastian</td>
      <td>Arnold</td>
      <td>Male</td>
      <td>44</td>
      <td>England</td>
      <td>Blue Collar</td>
      <td>20.Dec.15</td>
      <td>161517.82</td>
    </tr>
  </tbody>
</table>
</div>



    It checks the condition ands gives values if true.


```python
## Merge 2 tables
```


```python
## get two different csv files and try merge
#merged= pd.merge(df1,df2)
#merged= pd.merge(df1,df2,on ="HPI")
```


```python
## looks like intersection??? seee

df1= pd.DataFrame({ "HPI":[80,90,70,60],"Int_Rate":[2,1,2,3],"IND_GDP":[50,45,45,67]}, index=[2001, 2002,2003,2004])
df2=pd.DataFrame({ "HPI":[80,90,70],"Int_Rate":[2,1,2],"IND_GDP":[50,45,55]}, index=[2005, 2006,2007])
merged= pd.merge(df1,df2)

print(df1)
print(df2)
print(merged)
```

          HPI  Int_Rate  IND_GDP
    2001   80         2       50
    2002   90         1       45
    2003   70         2       45
    2004   60         3       67
          HPI  Int_Rate  IND_GDP
    2005   80         2       50
    2006   90         1       45
    2007   70         2       55
       HPI  Int_Rate  IND_GDP
    0   80         2       50
    1   90         1       45
    


```python
### Concatination
```


```python
df1 = pd.DataFrame({"HPI":[80,90,70,60],"Int_Rate":[2,1,2,3], "IND_GDP":[50,45,45,67]}, index=[2001, 2002,2003,2004])
df2 = pd.DataFrame({"HPI":[88,99,77,66],"Int_Rate":[2,1,2,3],"IND_GDP":[50,45,45,67]}, index=[2005, 2006,2007,2008])
concat= pd.concat([df1,df2])
print(concat)
```

          HPI  Int_Rate  IND_GDP
    2001   80         2       50
    2002   90         1       45
    2003   70         2       45
    2004   60         3       67
    2005   88         2       50
    2006   99         1       45
    2007   77         2       45
    2008   66         3       67
    


```python
# Change the name of the columns
```


```python
print(df1)
df1.columns =['a', 'b','c']
df1
```

          HPI  Int_Rate  IND_GDP
    2001   80         2       50
    2002   90         1       45
    2003   70         2       45
    2004   60         3       67
    




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>a</th>
      <th>b</th>
      <th>c</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>2001</th>
      <td>80</td>
      <td>2</td>
      <td>50</td>
    </tr>
    <tr>
      <th>2002</th>
      <td>90</td>
      <td>1</td>
      <td>45</td>
    </tr>
    <tr>
      <th>2003</th>
      <td>70</td>
      <td>2</td>
      <td>45</td>
    </tr>
    <tr>
      <th>2004</th>
      <td>60</td>
      <td>3</td>
      <td>67</td>
    </tr>
  </tbody>
</table>
</div>




```python
# Sort by the column
```


```python
df1.sort_values(by='c')
```




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>a</th>
      <th>b</th>
      <th>c</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>2002</th>
      <td>90</td>
      <td>1</td>
      <td>45</td>
    </tr>
    <tr>
      <th>2003</th>
      <td>70</td>
      <td>2</td>
      <td>45</td>
    </tr>
    <tr>
      <th>2001</th>
      <td>80</td>
      <td>2</td>
      <td>50</td>
    </tr>
    <tr>
      <th>2004</th>
      <td>60</td>
      <td>3</td>
      <td>67</td>
    </tr>
  </tbody>
</table>
</div>




```python
## Aggregation and Grouping
```


```python
## Data Formatting Methods (merge, sort, concatenation, reset_index,
```
